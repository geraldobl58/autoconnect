generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  phone      String?
  role       Role        @default(SELLER)
  password   String
  leads      Lead[]
  sales      Sale[]
  testDrives TestDrive[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum Role {
  ADMIN
  SELLER
}

model Vehicle {
  id        String         @id @default(uuid())
  brand     String
  model     String
  year      Int
  color     String?
  mileage   Int?
  price     Float
  status    VehicleStatus  @default(AVAILABLE)
  photos    VehiclePhoto[]
  leads     Lead[]
  sales     Sale[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  testDrive TestDrive[]
}

enum VehicleStatus {
  AVAILABLE
  RESERVED
  SOLD
}

model VehiclePhoto {
  id        String  @id @default(uuid())
  url       String
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Lead {
  id         String      @id @default(uuid())
  name       String
  email      String?
  phone      String
  interestId String? // ve√≠culo de interesse
  vehicle    Vehicle?    @relation(fields: [interestId], references: [id])
  sellerId   String?
  seller     User?       @relation(fields: [sellerId], references: [id])
  status     LeadStatus  @default(NEW)
  testDrives TestDrive[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Sale       Sale[]
}

enum LeadStatus {
  NEW
  CONTACTED
  TEST_DRIVE
  PROPOSAL
  CLOSED
  LOST
}

model TestDrive {
  id        String   @id @default(uuid())
  date      DateTime
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  sellerId  String
  seller    User     @relation(fields: [sellerId], references: [id])
}

model Sale {
  id        String   @id @default(uuid())
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  sellerId  String
  seller    User     @relation(fields: [sellerId], references: [id])
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}
